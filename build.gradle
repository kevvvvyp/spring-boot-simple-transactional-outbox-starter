import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java-library'
    id "maven-publish"
    id 'org.springframework.boot' version '3.2.2' apply false
    id "net.linguica.maven-settings" version "0.5"
}

apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'io.github.kevvvvyp'

java {
    sourceCompatibility = '21'
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    configure(options) {
        tags(
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:'
        )
    }
}

apply plugin: 'io.spring.dependency-management'
dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            if (project.hasProperty("releaseVersion")) {
                version = project.releaseVersion
            } else {
                version = 'undefined'
            }

            pom {
                name = 'spring-boot-simple-transactional-outbox-starter'
                description = 'A convenient Spring Boot Starter for publishing messages via the Transactional Outbox pattern.'
                url = 'https://github.com/kevvvvyp/spring-boot-simple-transactional-outbox-starter'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/kevvvvyp/spring-boot-simple-transactional-outbox-starter/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'kevvvvyp'
                        name = 'Kevin Paton'
                    }
                }
                scm {
                    url = 'https://github.com/kevvvvyp/spring-boot-simple-transactional-outbox-starter.git'
                }
            }

            repositories {
                maven {
                    if (version.endsWith('-SNAPSHOT')) {
                        url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    } else {
                        url "https://s01.oss.sonatype.org/content/repositories/releases/"
                    }

                    name = "OSSRH"
                    credentials {
                        username = findProperty("ossrhUsername")
                        password = findProperty("ossrhPassword")
                    }
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")

    if (signingKey != null) {
        println "Property found: signingKey"
    } else {
        println "Property not found: signingKey"
    }

    if (signingPassword != null) {
        println "Property found: signingPassword"
    } else {
        println "Property not found: signingPassword"
    }

    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.named("mavenJava").get()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation "org.awaitility:awaitility"
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation "org.assertj:assertj-core"

    testImplementation "org.testcontainers:mysql"
    testRuntimeOnly 'com.mysql:mysql-connector-j'

    testImplementation "org.testcontainers:postgresql"
    testRuntimeOnly 'org.postgresql:postgresql'

    testImplementation('com.github.javafaker:javafaker:1.0.2') {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

task copyDatabaseInitScripts(type: Copy) {
    from "db_scripts/"
    into 'src/test/resources/'
    include('**/*.sql')
}

processTestResources.dependsOn(copyDatabaseInitScripts)
javadoc.options.addStringOption('Xdoclint:none', '-quiet')