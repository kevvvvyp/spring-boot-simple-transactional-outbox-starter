package io.github.kevvvvyp.simpletransactionaloutboxstarter.domain.model;

import java.time.Instant;
import java.util.UUID;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@ToString
@Getter
@Setter
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "outbox",
		indexes = { @Index(name = "outbox_pkey", columnList = "id", unique = true),
					@Index(name = "deduplication_key_unique_index",
							columnList = "deduplication_key",
							unique = true),
					@Index(name = "outbox_scheduled_at_updated_at_index",
							columnList = "body, locked_by") })
public class OutboxEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.UUID)
	@Column(name = "id", nullable = false, unique = true)
	private UUID id;

	@Size(max = 120)
	@Column(name = "sender", nullable = false)
	private String sender;

	@Size(max = 120)
	@Column(name = "recipient", nullable = false)
	private String recipient;

	@Size(max = 120)
	@Column(name = "subject", nullable = false)
	private String subject;

	@Size(max = 120)
	@Column(name = "type", nullable = false)
	private String type;

	@Column(name = "body", nullable = false)
	private String body;

	@Column(name = "locked_by")
	private UUID lockedBy;

	@Size(max = 120)
	@NotNull
	@Column(name = "deduplication_key")
	private String deduplicationKey;

	@NotNull
	@Column(name = "scheduled_after", nullable = false)
	private Instant scheduledAfter;

	//Generated by DB
	@Column(name = "created_at", insertable = false, updatable = false)
	private Instant createdAt;

	@NotNull
	@Column(name = "updated_at", nullable = false)
	private Instant updatedAt;

}